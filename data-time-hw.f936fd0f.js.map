{"mappings":"ACoCA,IApCA,MACI,YAAY,CAAQ,CAAE,CAAI,CAAC,CACvB,IAAI,CAAC,SAAS,CAAG,SAAS,aAAa,CAAC,GACxC,IAAI,CAAC,IAAI,CAAG,EACZ,IAAI,CAAC,KAAK,EACd,CAGA,OAAO,CACH,IAAI,CAAC,MAAM,GACX,IAAI,CAAC,QAAQ,CAAG,YAAY,IAAM,IAAI,CAAC,MAAM,GAAI,IACrD,CAEA,QAAQ,CACJ,IAAM,EAAO,IAAI,CAAC,IAAI,CAAC,OAAO,GAAK,KAAK,GAAG,GAE3C,GAAG,AAAS,IAAT,EAAW,CACV,cAAc,IAAI,CAAC,QAAQ,EAC3B,MACJ,CAEA,IAAM,EAAO,KAAK,KAAK,CAAC,EAAQ,OAC1B,EAAQ,KAAK,KAAK,CAAE,EAAQ,MAAyB,MACrD,EAAO,KAAK,KAAK,CAAE,EAAQ,KAAoB,KAC/C,EAAO,KAAK,KAAK,CAAE,EAAQ,IAAc,IAI/C,CAAA,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,uBAAuB,WAAW,CAAG,EAAK,QAAQ,GAAG,QAAQ,CAAC,EAAG,KAC9F,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,wBAAwB,WAAW,CAAG,EAAM,QAAQ,GAAG,QAAQ,CAAC,EAAG,KAChG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,uBAAuB,WAAW,CAAG,EAAK,QAAQ,GAAG,QAAQ,CAAC,EAAG,KAC9F,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,uBAAuB,WAAW,CAAG,EAAK,QAAQ,GAAG,QAAQ,CAAC,EAAG,IAElG,CACJ,EAEmB,WAAY,IAAI,KAAK","sources":["<anon>","src/index.js"],"sourcesContent":["var $35da740d59af89ba$exports = {};\nclass $35da740d59af89ba$var$CountdownTimer {\n    constructor(selector, data){\n        this.timerElem = document.querySelector(selector);\n        this.data = data;\n        this.start();\n    }\n    start() {\n        this.update();\n        this.interval = setInterval(()=>this.update(), 1000);\n    }\n    update() {\n        const time = this.data.getTime() - Date.now();\n        if (time === 0) {\n            clearInterval(this.interval);\n            return;\n        }\n        const days = Math.floor(time / 86400000);\n        const hours = Math.floor(time % 86400000 / 3600000);\n        const mins = Math.floor(time % 3600000 / 60000);\n        const secs = Math.floor(time % 60000 / 1000);\n        this.timerElem.querySelector('[data-value=\"days\"]').textContent = days.toString().padStart(2, \"0\");\n        this.timerElem.querySelector('[data-value=\"hours\"]').textContent = hours.toString().padStart(2, \"0\");\n        this.timerElem.querySelector('[data-value=\"mins\"]').textContent = mins.toString().padStart(2, \"0\");\n        this.timerElem.querySelector('[data-value=\"secs\"]').textContent = secs.toString().padStart(2, \"0\");\n    }\n}\nnew $35da740d59af89ba$var$CountdownTimer(\"#timer-1\", new Date(\"Jul 17, 2025\")); // /*\n //  * Дні, що залишилися: ділимо значення UTC на 1000 * 60 * 60 * 24, кількість\n //  * мілісекунд в один день (мілісекунди * секунди * хвилини * години)\n //  */\n // // const days = Math.floor(time / (1000 * 60 * 60 * 24));\n // /*\n //  * Решта годин: отримуємо залишок від попереднього розрахунку за допомогою оператора\n //  * залишку% і ділимо його на кількість мілісекунд в одній годині\n //  * (1000 * 60 * 60 = мілісекунди * хвилини * секунди)\n //  */\n // // const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n // /*\n //  * Решта хвилин: отримуємо хвилини, що залишилися і ділимо їх на кількість\n //  * мілісекунд в одній хвилині (1000 * 60 = мілісекунди * секунди)\n //  */\n // // const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n // /*\n //  * Решта секунд: отримуємо секунди, які залишилися і ділимо їх на кількість\n //  * миллисекунд в одной секунде (1000)\n //  */\n // // const secs = Math.floor((time % (1000 * 60)) / 1000);\n\n\n//# sourceMappingURL=data-time-hw.f936fd0f.js.map\n","class CountdownTimer{\r\n    constructor(selector, data){\r\n        this.timerElem = document.querySelector(selector)\r\n        this.data = data\r\n        this.start()\r\n    }\r\n    \r\n\r\n    start(){\r\n        this.update()\r\n        this.interval = setInterval(() => this.update(), 1000)\r\n    }\r\n\r\n    update(){\r\n        const time = this.data.getTime() - Date.now();\r\n\r\n        if(time === 0){\r\n            clearInterval(this.interval)\r\n            return\r\n        }\r\n\r\n        const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n        const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n        const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n        const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n\r\n\r\n        this.timerElem.querySelector('[data-value=\"days\"]').textContent = days.toString().padStart(2, \"0\");\r\n        this.timerElem.querySelector('[data-value=\"hours\"]').textContent = hours.toString().padStart(2, \"0\");\r\n        this.timerElem.querySelector('[data-value=\"mins\"]').textContent = mins.toString().padStart(2, \"0\");\r\n        this.timerElem.querySelector('[data-value=\"secs\"]').textContent = secs.toString().padStart(2, \"0\");\r\n\r\n    }\r\n}\r\n\r\nnew CountdownTimer(\"#timer-1\", new Date(\"Jul 17, 2025\"));\r\n\r\n\r\n// /*\r\n//  * Дні, що залишилися: ділимо значення UTC на 1000 * 60 * 60 * 24, кількість\r\n//  * мілісекунд в один день (мілісекунди * секунди * хвилини * години)\r\n//  */\r\n// // const days = Math.floor(time / (1000 * 60 * 60 * 24));\r\n// /*\r\n//  * Решта годин: отримуємо залишок від попереднього розрахунку за допомогою оператора\r\n//  * залишку% і ділимо його на кількість мілісекунд в одній годині\r\n//  * (1000 * 60 * 60 = мілісекунди * хвилини * секунди)\r\n//  */\r\n// // const hours = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\r\n\r\n// /*\r\n//  * Решта хвилин: отримуємо хвилини, що залишилися і ділимо їх на кількість\r\n//  * мілісекунд в одній хвилині (1000 * 60 = мілісекунди * секунди)\r\n//  */\r\n// // const mins = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n// /*\r\n//  * Решта секунд: отримуємо секунди, які залишилися і ділимо їх на кількість\r\n//  * миллисекунд в одной секунде (1000)\r\n//  */\r\n// // const secs = Math.floor((time % (1000 * 60)) / 1000);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["constructor","selector","data","timerElem","document","querySelector","start","update","interval","setInterval","time","getTime","Date","now","clearInterval","days","Math","floor","hours","mins","secs","textContent","toString","padStart"],"version":3,"file":"data-time-hw.f936fd0f.js.map"}